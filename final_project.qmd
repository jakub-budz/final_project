---
title: "Final Project"
format: html
execute:
  eval: true
  echo: true
---

```{python}
# Larger dataset here: https://drive.google.com/drive/folders/1dFGQ71CesghWY5dWehwiumX57TJQiykV

# Base path (EACH PERSON MUST UPDATE TO WHERE THEIR CRIME DATA IS)
base_path = 'C:/Users/Jakub/Downloads/final_data'
```

```{python}
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point, shape
from shapely import wkt
import matplotlib.colors as mcolors
```

```{python}
# Load in the CSV files
# communities has demographic info for 77 communities
communities = pd.read_csv('data/chicago-community-areas.csv')

# hyde_park is hyde park crime info from 2015 to now
hyde_park = pd.read_csv('data/Hyde_Park_Crime_20241127.csv')

# homicides is violent crime from 1991 to present
homicides = pd.read_csv(
    'data/Violence_Reduction_-_Victims_of_Homicides_and_Non-Fatal_Shootings_20241125.csv')

# crimes is the full dataset of all crime from 2015 to present (11/27)
crimes = pd.read_csv(f'{base_path}/Crimes_-_2001_to_Present_20241127.csv')
crimes['Date'] = pd.to_datetime(crimes['Date'])
crimes['geometry'] = crimes.apply(lambda row: Point(
    row['Longitude'], row['Latitude']), axis=1)
crimes_gdf = gpd.GeoDataFrame(crimes, geometry='geometry', crs="EPSG:4326")

# chicago has 77 community names and their associated community number
chicago = pd.read_csv('data/CommAreas_20241127.csv')
chicago['the_geom'] = chicago['the_geom'].apply(wkt.loads)
chicago_gdf = gpd.GeoDataFrame(chicago, geometry='the_geom', crs="EPSG:4326")
# Remove outliers
crimes_gdf = crimes_gdf[(crimes_gdf['Longitude'].between(-87.94011, -87.52413)) &
                        (crimes_gdf['Latitude'].between(41.64454, 42.02304))]
```

```{python}
# Spatial join crimes and community areas
joined_gdf = gpd.sjoin(crimes_gdf, chicago_gdf,
                       how="inner", predicate="within")

# Add crime counts to the geo df
crime_counts = joined_gdf.groupby(
    "index_right").size().reset_index(name="crime_count")
chicago_gdf = chicago_gdf.reset_index()
chicago_gdf = chicago_gdf.merge(
    crime_counts, left_index=True, right_on="index_right", how="left")
# replace na's with 0
chicago_gdf["crime_count"] = chicago_gdf["crime_count"].fillna(0)
```

```{python}
# Plot total crime per community area
fig, ax = plt.subplots(figsize=(10, 10))

chicago_gdf.plot(
    column="crime_count",
    cmap="Reds",
    edgecolor="black",
    legend=True,
    vmin=0,
    vmax=100000,
    ax=ax
)

# Used ChatGPT to assist in adding the community numbers to the graph
for idx, row in chicago_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )

ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Total Crime Count by Community Area in Chicago (Jan 2015 to Nov 2024)")
plt.savefig("pictures/comm_crime_total.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```

```{python}
# Filter the data to just those 15 VRS communities
vrs_community = ["AUSTIN", "NORTH LAWNDALE", "HUMBOLDT PARK", "WEST GARFIELD PARK",
                 "ENGLEWOOD", "AUBURN GRESHAM", "WEST ENGLEWOOD", "GREATER GRAND CROSSING",
                 "ROSELAND", "EAST GARFIELD PARK", "SOUTH SHORE", "CHICAGO LAWN",
                 "SOUTH LAWNDALE", "CHATHAM", "WEST PULLMAN"]

vrs_gdf = chicago_gdf[chicago_gdf["COMMUNITY"].isin(vrs_community)]

# Plot total crime in VRS communities
fig, ax = plt.subplots(figsize=(10, 10))

chicago_gdf.plot(ax=ax, color='lightgrey', edgecolor='black')

vrs_gdf.plot(
    column="crime_count",
    cmap="Reds",
    edgecolor="black",
    legend=True,
    vmin=0,
    vmax=100000,
    ax=ax
)

for idx, row in vrs_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )

ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Total Crime Count by VRS Community Area in Chicago (Jan 2015 to Nov 2024)")
plt.savefig("pictures/vrs_comm_crime_total.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```

```{python}
crimes_2018_2020 = crimes[(crimes['Date'] >= '2018-01-01') & (crimes['Date'] < '2021-01-01')]
crimes_2021_2023 = crimes[(crimes['Date'] >= '2021-01-01') & (crimes['Date'] < '2024-01-01')]

crimes_2018_2020_gdf = gpd.GeoDataFrame(crimes_2018_2020, geometry='geometry', crs="EPSG:4326")
crimes_2021_2023_gdf = gpd.GeoDataFrame(crimes_2021_2023, geometry='geometry', crs="EPSG:4326")

joined_2018_2020_gdf = gpd.sjoin(crimes_2018_2020_gdf, chicago_gdf,
                       how="inner", predicate="within")

joined_2021_2023_gdf = gpd.sjoin(crimes_2021_2023_gdf, chicago_gdf,
                       how="inner", predicate="within")

crime_counts_2018_2020 = joined_2018_2020_gdf.groupby(
    "index_right").size().reset_index(name="crime_count")
crime_counts_2021_2023 = joined_2021_2023_gdf.groupby(
    "index_right").size().reset_index(name="crime_count")

chicago_2018_2020_gdf = gpd.GeoDataFrame(chicago, geometry='the_geom', crs="EPSG:4326")
chicago_2021_2023_gdf = gpd.GeoDataFrame(chicago, geometry='the_geom', crs="EPSG:4326")

chicago_2018_2020_gdf = chicago_2018_2020_gdf.merge(
    crime_counts_2018_2020, left_index=True, right_on="index_right", how="left")
chicago_2021_2023_gdf = chicago_2021_2023_gdf.merge(
    crime_counts_2021_2023, left_index=True, right_on="index_right", how="left")

chicago_2018_2020_gdf["crime_count"] = chicago_2018_2020_gdf["crime_count"].fillna(0)
chicago_2021_2023_gdf["crime_count"] = chicago_2021_2023_gdf["crime_count"].fillna(0)
```

```{python}
fig, ax = plt.subplots(figsize=(10, 10))

chicago_2018_2020_gdf.plot(
    column="crime_count",
    cmap="Reds",
    edgecolor="black",
    legend=True,
    ax=ax,
    vmin=0,
    vmax=40000
)

for idx, row in chicago_2018_2020_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )

ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Total Crime Count by Community Area in Chicago (2018 to 2020)")
plt.savefig("pictures/comm_crime_total_18_20.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```

```{python}
fig, ax = plt.subplots(figsize=(10, 10))

chicago_2021_2023_gdf.plot(
    column="crime_count",
    cmap="Reds",
    edgecolor="black",
    legend=True,
    ax=ax,
    vmin=0,
    vmax=40000
)

for idx, row in chicago_2021_2023_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )

ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Total Crime Count by Community Area in Chicago (2021 to 2023)")
plt.savefig("pictures/comm_crime_total_21_23.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```

```{python}
diff_gdf = chicago_2021_2023_gdf[['AREA_NUM_1', 'crime_count', 'the_geom']].merge(
    chicago_2018_2020_gdf[['AREA_NUM_1', 'crime_count', 'the_geom']], 
    on='AREA_NUM_1', 
    suffixes=('_2021_2023', '_2018_2020')
)
diff_gdf['crime_diff'] = diff_gdf['crime_count_2021_2023'] - diff_gdf['crime_count_2018_2020']
diff_gdf = diff_gdf.drop(columns=['the_geom_2018_2020'])
diff_gdf = diff_gdf.rename(columns={'the_geom_2021_2023':'the_geom'})
```

```{python}                
fig, ax = plt.subplots(figsize=(10, 10))

diff_gdf.plot(
    column="crime_diff",
    cmap="coolwarm",
    edgecolor="black",
    legend=True,
    ax=ax,
    vmin=-10000,
    vmax=10000
)
for idx, row in diff_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )
ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Difference in Total Crime Count by Community Area (2018-2020 to 2021-2023)")
plt.savefig("pictures/comm_crime_diff.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```

```{python}
if isinstance(vrs_community, list):
    vrs_community_df = pd.DataFrame(vrs_community, columns=["COMMUNITY"])
else:
    vrs_community_df = vrs_community
comms = chicago[['AREA_NUM_1', 'COMMUNITY']]
comm_num = pd.merge(vrs_community_df, comms, on='COMMUNITY', how='inner')
vrs_diff_gdf = pd.merge(
    diff_gdf, 
    comm_num[['AREA_NUM_1', 'COMMUNITY']],
    on='AREA_NUM_1',
    how='inner'
)
```

```{python}
fig, ax = plt.subplots(figsize=(10, 10))

chicago_gdf.plot(ax=ax, color='lightgrey', edgecolor='black')

vrs_diff_gdf.plot(
    column="crime_diff",
    cmap="coolwarm", 
    linewidth=0.8,
    edgecolor="black",
    legend=True,
    vmin=-10000,
    vmax=10000,
    ax=ax 
)
for idx, row in vrs_diff_gdf.iterrows():
    if row["the_geom"].is_empty:
        continue
    centroid = row["the_geom"].centroid
    ax.annotate(
        text=str(row["AREA_NUM_1"]),
        xy=(centroid.x, centroid.y),
        horizontalalignment="center",
        fontsize=8,
        color="black"
    )
ax.axis("off")
for spine in ax.spines.values():
    spine.set_visible(False)

plt.title("Difference in Total Crime Count by VRS Community Area (2018-2020 to 2021-2023)")
plt.savefig("pictures/vrs_comm_crime_diff.png", bbox_inches='tight', dpi=300)
plt.show()
plt.close()
```